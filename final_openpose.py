# -*- coding: utf-8 -*-
"""Final OpenPose.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lticPUSMfVdmGSTKH2Gop5aCGE1mQN2V

# Pose Detection with OpenPose

This notebook uses an open source project [CMU-Perceptual-Computing-Lab/openpose](https://github.com/CMU-Perceptual-Computing-Lab/openpose.git) to detect/track multi person poses on a video from your Google Drive

@dinatih update base on https://colab.research.google.com/github/tugstugi/dl-colab-notebooks/blob/master/notebooks/OpenPose.ipynb

## Choose a video from your Google Drive
"""

# !cd openpose || true && mkdir build && cd build && cmake .. && make -j`nproc`
!cd openpose || true && cd build && cmake .. && make -j`nproc`

"""## Install OpenPose on Google Colab 

*   List item
*   List item



"""

from google.colab import drive
drive.mount('/content/drive')

import os
from os.path import exists, join, basename, splitext

git_repo_url = 'https://github.com/CMU-Perceptual-Computing-Lab/openpose.git'
# git_repo_url = 'https://github.com/dinatih/openpose.git'
project_name = splitext(basename(git_repo_url))[0]

if 1 or not exists(project_name):
  !rm -rf openpose
  # see: https://github.com/CMU-Perceptual-Computing-Lab/openpose/issues/949

  print("install new CMake becaue of CUDA10")
  if not exists('cmake-3.13.0-Linux-x86_64.tar.gz'):
    !wget -q https://cmake.org/files/v3.13/cmake-3.13.0-Linux-x86_64.tar.gz
  !tar xfz cmake-3.13.0-Linux-x86_64.tar.gz --strip-components=1 -C /usr/local

  print("clone openpose")
  !git clone -q --depth 1 $git_repo_url
  print("CMakelist.txt's caffe fix")
  !sed -i 's/execute_process(COMMAND git checkout master WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\/3rdparty\/caffe)/execute_process(COMMAND git checkout f019d0dfe86f49d1140961f8c7dec22130c83154 WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\/3rdparty\/caffe)/g' openpose/CMakeLists.txt
  print("install system dependencies")
  !apt-get -qq install -y libatlas-base-dev libprotobuf-dev libleveldb-dev libsnappy-dev libhdf5-serial-dev protobuf-compiler libgflags-dev libgoogle-glog-dev liblmdb-dev opencl-headers ocl-icd-opencl-dev libviennacl-dev
  print("build openpose")
  # !cd openpose && rm -rf build || true && mkdir build && cd build && cmake .. && make -j`nproc`

"""## Process Videos from Drive




"""

import os
from os.path import exists, join, basename, splitext

# import re 

# def sorted_nicely( l ): 
#     """ Sort the given iterable in the way that humans expect.""" 
#     convert = lambda text: int(text) if text.isdigit() else text 
#     alphanum_key = lambda key: [ convert(c) for c in re.split('([0-9]+)', key) ] 
#     return sorted(l, key = alphanum_key)

folder_path = '/content/drive/My Drive/CS231A/Project/ASLLVD/videos_trimmed/'
folder_path_json = '/content/drive/My Drive/CS231A/Project/ASLLVD/output_json/'
folder_path_video = '/content/drive/My Drive/CS231A/Project/ASLLVD/vid_test/'
# !mkdir '{folder_path_json}'
# !mkdir '{folder_path_image}'
# files = os.listdir(folder_path)
# files.reverse()
# for filename in files:
#   if filename.endswith('.jpg'):
#     print(filename)
#     colab_openpose_video_path = colab_video_path.replace('.mp4', '') + '-openpose.mp4'
#     print(colab_openpose_video_path)
    # if not exists(colab_openpose_video_path): 
    #   !ffmpeg -i '{colab_video_path}' -qscale:v 2 '{folder_path_image}/'output_%03d.jpg 
    #   files = os.listdir(folder_path_image)
      
      # sorted_frames=[]
      # for x in sorted_nicely(files):
      #     sorted_frames.append(x)
      # count = 0
      # step = 3
      
      # for filename in sorted_frames:
      #   print(filename)
      #   if count% step !=0:
      #     !rm '{folder_path_image}''{filename}'
      #   if count % step == 0:
      #     print(count)
      #   count = count + 1
      #   #every third frame

for filename in os.listdir(folder_path):
  if filename.endswith('.mp4'):
    print(filename)

    # video to json
    num = filename[:-4]
    if not exists(folder_path_json + num):
      !mkdir '{folder_path_json}''{num}'
      !cd openpose && ./build/examples/openpose/openpose.bin --video '{folder_path}''{filename}' \
        --display 0 --render_pose  0 --face --hand \
        --write_json '{folder_path_json}''{num}' # -vframes 6000 
    # video to video
    # !cd openpose && ./build/examples/openpose/openpose.bin --video '/content/drive/My Drive/CS231A/Project/ASLLVD/1.mp4' \
    #   --display 0 --face --hand \
    #   --write_video '/content/drive/My Drive/CS231A/Project/ASLLVD/vid_test/test.mp4'

# image to json
# !cd openpose && ./build/examples/openpose/openpose.bin --image_dir '{folder_path}' \
#   --display 0 --render_pose  0 --face --hand \
#   --write_json '{folder_path_json}' # -vframes 6000 
# image to image
# !cd openpose && ./build/examples/openpose/openpose.bin --image_dir '{folder_path}' \
#   --display 0 --face --hand \
#   --write_images '{folder_path_image}'
      

print('done!')

# Commented out IPython magic to ensure Python compatibility.
### NONE OF THE CODE BELOW IS USED FOR CS231A


# %cd "/content/drive/My Drive/Colab_Files/EverybodyDanceNow/"
# %ls

import glob
import os
import re
def get_trailing_number(s):
	m = re.search(r'\d+$', s)
	return int(m.group()) if m else None
  
# Function to rename multiple files 
def main(mypath, name_stub, len_num, remove): 
	count = 0 
	files = glob.glob(mypath+"*.json")
	print(files)
	for current in files:
		number_trailing = re.findall('\d+',current )
		number_trailing = [s.lstrip("0") for s in number_trailing]
		
		#print(number_trailing)
		if remove==True:
			os.rename(current, mypath+name_stub+str(number_trailing[0]).zfill(len_num)+"_keypoints")#+".json") 
			print(current, mypath+name_stub+str(number_trailing[0]).zfill(len_num)+"_keypoints")
		else:
			os.rename(current, mypath+name_stub+str(number_trailing[0]).zfill(len_num)+"_keypoints"+".json") 
			print(current, mypath+name_stub+str(number_trailing[0]).zfill(len_num)+"_keypoints"+'.json')
		count = count + 1

def main_2(mypath, name_stub, len_num, remove): 
	count = 0 
	files = glob.glob(mypath+"*.jpg")
	print(files)
	for current in files:
		number_trailing = re.findall('\d+',current )
		number_trailing = [s.lstrip("0") for s in number_trailing]
		
		if remove==True:
			os.rename(current, mypath+name_stub+str(number_trailing[0]).zfill(len_num))#+".jpg") 
			print(current, mypath+name_stub+str(number_trailing[0]).zfill(len_num))
		else:
			os.rename(current, mypath+name_stub+str(number_trailing[0]).zfill(len_num)+".jpg") 
			print(current, mypath+name_stub+str(number_trailing[0]).zfill(len_num)+".jpg") 
		count = count + 1
  
  
# Driver Code 
import sys

#print(sys.argv)
if sys.argv[2] == 'json':
	main(sys.argv[1], "output_",6) 
if sys.argv[2] == 'jpg':
	main_2(sys.argv[1], "output_",6)

main("./dataset_raw/jason_keys/", "output_", 6, False)
#main("./dataset_raw/close_keys/", "output_", 6, False)
#main("./dataset_raw/far_keys/", "output_", 6, False)

main_2("./dataset_raw/jason_frames/", "output_", 6, False)
#main_2("./dataset_raw/close_frames/", "output_", 6, False)
#main_2("./dataset_raw/far_frames/", "output_", 6, False)

"""Change the --save_dir from dataset/train to dataset/test depending on situation, this one is for train dataset"""

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/drive/My Drive/Colab_Files/EverybodyDanceNow/"

!python3 ./data_prep/graph_train.py \
 --keypoints_dir ./dataset_raw/jason_keys/ \
 --frames_dir ./dataset_raw/jason_frames/ \
 --save_dir ./dataset/train/ \
 --spread 0 100000 1 \
 --facetexts

"""This one is for Validation

"""

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/drive/My Drive/Colab_Files/EverybodyDanceNow/"

!python3 ./data_prep/graph_avesmooth.py \
--keypoints_dir ./dataset_raw/jason_keys/ \
--frames_dir ./dataset_raw/jason_frames/ \
--save_dir ./dataset/test/ \
--spread 0 10000 1 \
--facetexts

drive.flush_and_unmount()

"""Test- Actual inferencings Use"""

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/drive/My Drive/Colab_Files/EverybodyDanceNow/"

!python3 ./data_prep/graph_posenorm.py \
--target_keypoints ./dataset_raw/jason_keys/ \
--source_keypoints ./dataset_raw/close_keys/  \
--source_shape 1080 1920 3 \
--target_shape 1080 1920 3 \
--source_frames ./dataset_raw/jason_frames/ \
--results ./dataset/test/ \
--target_spread 0 856 \
--source_spread 0 2436 \
--calculate_scale_translation  \
--format json \
--filestart "output_" \
--x_scaling 2 \
--y_scaling 1000
#filestart is the name of the file stub